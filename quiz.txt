Navigating the File System

1.  How do you move back and forth between directories?
/	
./	
../	
cd ../

2.  How do you create and delete files?

Touch - create
rm - remove

3.  How do you create and delete directories?

Mkdir - make directory
Rmdir - remove dir

4.  How can I see exactly where I am within the filesystem?

pwd
ls

5.  How can I see the files and directories within the current directory that I am in?

pwd


Git

1.  How do you let git know you want to track changes made in a directory?
git commit -m

2.  How do you tell git that you like the work you’ve done and want it to be a part of a chunk of work to be saved?
git add

3.  How do you tell git you want to save a chunk of work?
git commit

4.  How do you tell git where to push your local changes up to a online repository?
git push

5.  How can you safely work on a different version of your current project?

git add branch

6.  How can you make that different version become a part of your main version

git add main
7.  How do I move between versions of my project?
git branch and git checkout

8.  How can I go back to previous chunks of work that I’ve created and work from that point in time?

1. Create Project
2. Track Changes
3. Do something on main branch
4. Make new branch
5. Do something on new branch
6. Merge
7. Fix conflict

9.  Let’s say I wrote a bad message for a commit. How could I change it? (edited) 

git revert


Python (GIVE EXAMPLES)

1.  How do I run my code from the terminal? 

python3 name of file 

2.  What can I use to reference a value later in my code?

=

3.  How can I make my program display text or some value in my terminal?

Print function

4.  How can I make my code make decisions on which code to execute?
 Through conditions

Through conditions
if 
Elif
Else

5.  How can I repeat blocks of code based on conditions?

Loops
repeat/until


6.  Why is it critical to ensure that our conditions eventually become false when repeating blocks of code? Because a specific condition needs to be met. This is when we use the while loop to repeat a section of code an unknown number of times until that specific condition is met. 

If it is true, the code executes the body of the loop again. This process is repeated as long as the expression evaluates to true. If the expression is false, the loop terminates and control transfers to the statement following the do-while loop.


7.  What are sequences and what are the differences between them?

Sequences are a generic term for an ordered set

1. numbers = range(1, 10)
2. sequence_of_numbers = []
3. for number in numbers:
4. if number % 5 in (1, 2):
5. sequence_of_numbers. append(number)
6. print(sequence_of_numbers)


8.  How do I access a value within the various types of sequences?

Indexing and slicing are the most common means that are used to access lists
Python lists are ordered sequences. This allows us to use indexing to access and manipulate its item easily.

9.  What is an index when talking about sequences?
We can access individual items from a sequence by specifying the index of that item. Python ascribes the 1st entry in a sequence index-0, the second entry index-1, and so on.

10. What is the index of the first value within a sequence?
-0

11. How can I add or remove a value from a sequence?
clear(), pop(), and remove()

12. What is the index of the last value within a sequence?

append(), extend(), and insert() to add items (elements) to a list or combine other lists. You can also use the + operator to combine lists, or use slices to insert items at specific positions.

13. How can I get the length of a sequence?
Len function

14. What can I use to reference and use a block of code later in my code?

You create a function using the def keyword (which is short for define)

15. What is DRY?
Don’t Repeat Yourself

16. What is Scope? Provide an example.

A scope defines the visibility of a name within a block. If a local variable is defined in a block, its scope includes that block. If the definition occurs in a function block, the scope extends to any blocks contained within the defining one, unless a contained block introduces a different binding for the name.


17. What is the difference between parameters and arguments?

Parameters or Arguments? The terms parameter and argument can be used for the same thing: information that are passed into a function. ... A parameter is the variable listed inside the parentheses in the function definition. An argument is the value that are sent to the function when it is called.

18. What is recursion?
a function defined in terms of itself via self-referential expressions.

19. How can you return a value from a function?

Python return statement is a special statement that you can use inside a function or method to send the function's result back to the caller. A return statement consists of the return keyword followed by an optional return value. The return value of a Python function can be any Python object.

20. Describe a dictionary. How and why would it be useful?

Dictionary in Python is an unordered collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.

21. How can you remove a value from a dictionary?

use the pop() method or the “del” keyword

22. How can you access and change values within a dictionary?

1. Method #1 : Using in operator.
2. Method #2 : Using list comprehension.
3. Method #3 : Using dict.items()
4. Method #4 : Using enumerate()

23. What data types can a sequence hold?

strings, Unicode strings, lists, tuples, bytearrays, and range objects

24. What data types can a dictionary hold?

key:value pair. Key-value is provided in the dictionary to make it more optimized

25. How can you iterate through a dictionary?

create a for loop, use items() to iterate through a dictionary's key-value pairs, use keys() to iterate through a dictionary's keys, or use values() to iterate through a dictionary's values.

26. What is object oriented programming?

programming paradigm that uses objects and classes in programming

27. Describe a class? Why are they useful?

an outline for creating a new object
An object is anything that you wish to manipulate or change while working through the code. Every time a class object is instantiated, which is when we declare a variable, a new object is initiated from scratch.

28. What are class properties? How would I give a class an initial set of properties?

The property() method in Python provides an interface to instance attributes. It encapsulates instance attributes and provides a property, same as Java and C#. The property() method takes the get, set and delete methods as arguments and returns an object of the property class.

29. What are class methods?

is a method which is bound to the class and not the object of the class. They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance. It can modify a class state that would apply across all the instances of the class.

30. What is inheritance?

Inheritance allows us to define a class that inherits all the methods and properties from another class. Parent class is the class being inherited from, also called base class. Child class is the class that inherits from another class, also called derived class.

31.  What are the various data types?

* Integers.
* Floating-Point Numbers.
* Complex Numbers.
* Strings. Escape Sequences in Strings. Raw Strings. Triple-Quoted Strings.
* Boolean Type, Boolean Context, and “Truthiness”
* Built-In Functions. Math. Type Conversion. Iterables and Iterators. Composite Data Type. ...
* Conclusion.
